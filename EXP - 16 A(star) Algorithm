import heapq

class Graph:
    def __init__(self):
        self.nodes = {}
    
    def add_edge(self, node1, node2, cost):
        if node1 not in self.nodes:
            self.nodes[node1] = []
        if node2 not in self.nodes:
            self.nodes[node2] = []
        self.nodes[node1].append((node2, cost))
        self.nodes[node2].append((node1, cost))  # Undirected graph

    def a_star(self, start, goal, heuristic):
        open_set = []
        heapq.heappush(open_set, (0, start))  # (f(n), node)
        
        g_score = {node: float('inf') for node in self.nodes}
        g_score[start] = 0

        came_from = {}
        
        while open_set:
            _, current = heapq.heappop(open_set)
            
            if current == goal:
                path = []
                while current in came_from:
                    path.append(current)
                    current = came_from[current]
                path.append(start)
                return path[::-1], g_score[goal]

            for neighbor, cost in self.nodes[current]:
                tentative_g_score = g_score[current] + cost
                
                if tentative_g_score < g_score[neighbor]:
                    came_from[neighbor] = current
                    g_score[neighbor] = tentative_g_score
                    f_score = tentative_g_score + heuristic[neighbor]
                    heapq.heappush(open_set, (f_score, neighbor))
        
        return None, float('inf')  # No path found

# Example Graph
graph = Graph()
graph.add_edge("A", "B", 4)
graph.add_edge("A", "C", 2)
graph.add_edge("B", "C", 5)
graph.add_edge("B", "D", 10)
graph.add_edge("C", "D", 3)
graph.add_edge("D", "E", 8)
graph.add_edge("E", "F", 7)

# Heuristic values (Straight-line distance to goal)
heuristic = {
    "A": 10, "B": 8, "C": 6, "D": 4, "E": 2, "F": 0  # Example heuristics
}

start, goal = "A", "F"
path, cost = graph.a_star(start, goal, heuristic)

print(f"Shortest Path: {path}")
print(f"Total Cost: {cost}")
